<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
  <arg name="enable_radar_filtering"		default="0"/>

	<node pkg="octomap_server" type="radar_point_octomap_server_node" name="octomap_server" ns="radar_point_cloud">
		<param name="resolution" value="0.15" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="world" />
    <param name="base_frame_id" type="string" value="world"/>
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="10.0" />
    <param name="sensor_model/azimuth_fov" value="0.7853982"/>
    <param name="sensor_model/elevation_fov" value="0.7853982"/>
    <param name="num_scans_in_window" value="100"/>
		
    <param name="bin_width" value="0.15"/>


		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/mmWaveDataHdl/RScan" if="$(eval arg('enable_radar_filtering')==0)"/>
    <remap from="cloud_in" to="/mmWaveDataHdl/RScan/filtered" if="$(arg enable_radar_filtering)"/>
	
	</node>
</launch>